/*Ejercicio 17 ‚Äì Conteo de d√≠gitos / Digit Count

---

üá™üá∏ Descripci√≥n

Solicita al usuario un n√∫mero entero (puede ser negativo) y muestra:

La cantidad de d√≠gitos del n√∫mero (ignorando el signo).

La suma de los d√≠gitos.

(Opcional) Si el n√∫mero es capic√∫a (pal√≠ndromo) ignorando el signo.

---

Requisitos

Validar entrada: solo enteros (pueden incluir -).

Ignorar el signo para el conteo de d√≠gitos y la suma.

No usar conversi√≥n a double para evitar errores con n√∫meros grandes; usar String, long o BigInteger.

---

Pasos (algoritmo)

Leer la entrada como String.

Validar que sea un entero v√°lido (opcional: con expresi√≥n regular ^-?\d+$).

Si empieza con -, quitar el signo para procesar.

Contar length() para los d√≠gitos y recorrer caracteres para sumar.

(Opcional) Verificar si el String sin signo es pal√≠ndromo.

---

üá¨üáß Description

Ask the user for an integer (it may be negative) and print:

The number of digits (ignoring the sign).

The sum of the digits.

(Optional) Whether it is a palindrome (ignoring the sign).

Requirements

Validate input: integers only (may include -).

Ignore the sign when counting and summing digits.

Avoid converting to double to prevent precision issues; use String, long, or BigInteger.

Steps (algorithm)

Read input as String.

Validate it's a valid integer (optionally via regex ^-?\d+$).

If it starts with -, remove the sign for processing.

Use length() for digit count and iterate chars to sum.

(Optional) Check palindrome for the unsigned string. 

---

*/

import java.math.BigInteger;
import java.util.Scanner;

public class Ejercicio17_Conteo_de_d√≠gitos {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String input;

        // Leer hasta que sea un entero v√°lido (con signo no opcional)
        while (true) {
            System.out.print("Ingresa un n√∫mero entero (puede ser negativo): ");
            input = sc.nextLine().trim();
            if (input.matches("-?\\+")) {
                break;
            } else {
                System.out.println("Entraa no v√°lida. Escribe solo d√≠gitos (y un '-' opcional). \n");
            }
        }

        boolean esNegativo = input.startsWith("-");
        String absStr = esNegativo ? input.substring(1) : input; // quitar signo

        // Manejo de n√∫mero grande por si acaso
        BigInteger valor = new BigInteger(input);

        // Conteo de d√≠gitos
        int cantidadDigitos = absStr.length();

        // Suma de d√≠gitos
        int suma = 0;
        for (char c : absStr.toCharArray()) {
            suma += (c - '0');
        }

        // Pal√≠ndromo (capic√∫a)
        String reverso = new StringBuilder(absStr).reverse().toString();
        boolean esPalindromo = absStr.equals(reverso);

        // Salida
        System.out.println("\nN√∫mero ingresado: " + valor);
        System.out.println("Cantidad de d√≠gitos (sin signo): " + cantidadDigitos);
        System.out.println("Suma de d√≠gitos: " + suma);
        System.out.println("¬øEs capic√∫a ? " + (esPalindromo ? "S√≠" : "No"));

        sc.close();
    }
}

/* üß™ Ejemplos de ejecuci√≥n

Ingresa un n√∫mero entero (puede ser negativo): -12030

N√∫mero ingresado: -12030
Cantidad de d√≠gitos (sin signo): 5
Suma de d√≠gitos: 6
¬øEs capic√∫a? No

Ingresa un n√∫mero entero (puede ser negativo): 1221

N√∫mero ingresado: 1221
Cantidad de d√≠gitos (sin signo): 4
Suma de d√≠gitos: 6
¬øEs capic√∫a? S√≠

---

‚úÖ Notas

Si el usuario ingresa 0, la cantidad de d√≠gitos es 1 y la suma es 0.

Usar BigInteger evita desbordamientos para valores muy grandes.

Si quieres evitar BigInteger, puedes trabajar √∫nicamente con String.

---

üß∞ C√≥mo compilar y ejecutar
javac Ejercicio17ConteoDigitos.java
java Ejercicio17ConteoDigitos

 */
