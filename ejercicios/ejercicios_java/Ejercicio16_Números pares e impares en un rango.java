/*/zEjercicio 16 ‚Äì N√∫meros pares e impares en un rango / Even & Odd Numbers in a Range


Pide al usuario dos n√∫meros enteros: inicio y fin del rango (inclusive). Muestra por pantalla:

Todos los n√∫meros pares del rango.

Todos los n√∫meros impares del rango.

Requisitos

Validar que el n√∫mero inicial sea menor o igual que el final. Si el usuario los ingresa al rev√©s, puedes intercambiarlos o pedir de nuevo.

Usar un ciclo for para recorrer el rango.

Usar if con el operador m√≥dulo % para separar par (n % 2 == 0) e impar (n % 2 != 0).

Manejar entradas no v√°lidas con mensajes claros.

Pasos (algoritmo)

Leer inicio y fin del teclado.

Si inicio > fin, intercambiar valores.

Recorrer con for (int i = inicio; i <= fin; i++).

Si i % 2 == 0 ‚Üí agregar a pares; si no ‚Üí a impares.

Imprimir los dos listados.
 /* */

import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class Ejercicio16_N√∫meros_pares_e_impares_en_un_rango {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        Integer inicio = null, fin = null;

        // Lectura segura de enteros
        while (inicio == null) {
            System.out.print("Ingresa el n√∫mero inicial: ");
            if (sc.hasNextInt()) {
                inicio = sc.nextInt();
            } else {
                System.out.println("Entrada no v√°lida. Debes ingresar un entero.");
                sc.next();
            }
        }

        while (fin == null) {
            System.out.print("Ingresa el n√∫mero final: ");
            if (sc.hasNextInt()) {
                fin = sc.nextInt();
            } else {
                System.out.println("Entrada no v√°lida. Debes ingresar un entero.");
                sc.next();
            }
        }

        // Asegurar inicio <= fin
        if (inicio > fin) {
            int temp = inicio;
            inicio = fin;
            fin = temp;
            System.out.println("(Nota) Los valores se ingresaron al rev√©s. Se han intercambiado.");
        }

        List<Integer> pares = new ArrayList<>();
        List<Integer> impares = new ArrayList<>();

        for (int i = inicio; i <= fin; i++) {
            if (i % 2 == 0) {
                pares.add(i);
            } else {
                impares.add(i);
            }
        }

        System.out.println("\nN√∫meros pares:");
        if (pares.isEmpty()) {
            System.out.println("(ninguno)");
        } else {
            for (int n : pares) System.out.print(n + " ");
            System.out.println();
        }

        System.out.println("\nN√∫meros impares:");
        if (impares.isEmpty()) {
            System.out.println("(ninguno)");
        } else {
            for (int n : impares) System.out.print(n + " ");
            System.out.println();
        }

        sc.close();
    }
}


/* üß™ Ejemplo de ejecuci√≥n

Ingresa el n√∫mero inicial: 2
Ingresa el n√∫mero final: 10

N√∫meros pares:
2 4 6 8 10

N√∫meros impares:
3 5 7 9

‚úÖ Notas

Si prefieres no intercambiar, puedes volver a pedir los valores hasta que inicio <= fin.

El rango es inclusive (incluye inicio y fin si aplican).

Puedes optimizar empezando el bucle en el primer par/impar del rango, pero aqu√≠ se prioriza legibilidad.

---

üß∞ C√≥mo compilar y ejecutar

javac Ejercicio16ParesImpares.java
java Ejercicio16ParesImpares

 */
